class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
'''
class Stack:
    def __init__(self):
        self.top = None
    def isEmpty(self):
        return self.top is None
    def push(self, data):
        node = Node(data)
        node.next = self.top
        self.top = node
    def pop(self):
        if self.isEmpty():
            raise Exception("Stack is empty")
        data = self.top.data
        self.top = self.top.next 
        return data
    def peek(self):
        return None if self.isEmpty() else self.top.data
        
stack = Stack()
stack.push(1)
stack.push(2)
stack.push(3)
print(stack.peek())
print("Popped:", stack.pop())  # Output: 3
print("Popped:", stack.pop())  # Output: 2
print("Popped:", stack.pop())
print("Is Empty:", stack.isEmpty())  # Output: False
'''
class Queue:
    def __init__(self):
        self.front = None
        self.rear = None
    def isEmpty(self):
        return self.front is None
    def enqueue(self, data):
        newNode = Node(data)
        if(self.isEmpty()):
            self.front = self.rear = newNode
        else:
            self.rear.next = newNode
            self.rear = newNode
    def dequeue(self):
        if self.isEmpty():
            return None
        dequeue_data = self.front.data
        self.front = self.front.next
        if self.front is None:
            self.rear = None
        return dequeue_data
            
    def peek(self):
        return None if self.isEmpty() else self.front.data
queue = Queue()
queue.enqueue(1)
queue.enqueue(2)
queue.enqueue(3)

print("Queue Peek:", queue.peek())  # Output: 1

print("Dequeued:", queue.dequeue())  # Output: 1
print("Dequeued:", queue.dequeue())  # Output: 2

print("Is Empty:", queue.isEmpty())  # Output: False
